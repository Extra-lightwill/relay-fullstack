input addTaskInput {
  text: String!
  clientMutationId: String
}

type addTaskPayload {
  viewer: User
  task: Task
  taskEdge: TaskEdge
  clientMutationId: String
}

type Mutation {
  addTask(input: addTaskInput!): addTaskPayload
  removeTask(input: removeTaskInput!): removeTaskPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input removeTaskInput {
  id: ID!
  clientMutationId: String
}

type removeTaskPayload {
  viewer: User
  deletedTaskId: ID
  clientMutationId: String
}

type Task implements Node {
  # The ID of an object
  id: ID!
  completed: Boolean
  text: String
  user: User
}

# A connection to a list of items.
type TaskConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TaskEdge]
}

enum TaskConnectionOrder {
  ID
}

# An edge in a connection.
type TaskEdge {
  # The item at the end of the edge
  node: Task

  # A cursor for use in pagination
  cursor: String!
}

type User {
  # The ID of an object
  id: ID!

  # Users's username
  username: String

  # User's website
  test01: String

  # User's website
  test02: String

  # User's website
  website: String
  users(limit: Int, order: String): [User]
  tasks(after: String, first: Int, before: String, last: Int, orderBy: [TaskConnectionOrder]): TaskConnection
}
